package coach.interfaces.customer;

//Generated by GuiGenie - Copyright (c) 2004 Mario Awad.
//Home Page http://guigenie.cjb.net - Check often for new versions!

import coach.dao.dbConnection;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

public class bookRoutesCustomer extends JPanel implements ActionListener {

    String[] EUCountries = {"Austria", "Italy", "Belgium", "Latvia", "Bulgaria", "Lithuania", "Croatia", "Luxembourg", "Cyprus", "Malta", "Czechia", "Netherlands", "Denmark", "Poland", "Estonia", "Portugal", "Finland", "Romania", "France", "Slovakia", "Germany", "Slovenia", "Greece", "Spain", "Hungary", "Sweden", "Ireland"};


    JFrame frame = new JFrame("Book Routes");
    JComboBox source = new JComboBox(EUCountries);
    JComboBox destination = new JComboBox(EUCountries);
    JTable table = new JTable();
    JScrollPane tableWithScrolBox = new JScrollPane(table);
    JButton searchBtn = new JButton("Search");
    JButton bookRouteBtn = new JButton("Book Selected Route");

    String tableData[][] = new String[25][20];

    // TODO: 1/2/2022
    String customerID;


    public bookRoutesCustomer(String CusID) {
        customerID = CusID;
        createWindow();
        populateData();
        createTable();
        setLocationAndSize();
        addComponentsToFrame();
        setVisibleWindow();
        actionEvent();
    }

    private void setVisibleWindow() {
        frame.setVisible(true);
    }

    public void createWindow() {
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setPreferredSize(new Dimension(745, 350));
        frame.setLayout(null);
        frame.pack();
    }

    private void populateData() {
        ResultSet resultSet = null;
        try {
            Connection conn = dbConnection.getInstance().getConnection();
            PreparedStatement preparedStatement = conn.prepareStatement("SELECT * from busbook.routes");
            resultSet = preparedStatement.executeQuery();

            int i = 0;
            while (resultSet.next()) {
                String routeId = resultSet.getString("routeId");
                String origin = resultSet.getString("origin");
                String originCity = resultSet.getString("originCity");
                String destination = resultSet.getString("destination");
                String destinationCity = resultSet.getString("destinationCity");
                Date departure = resultSet.getDate("departure");
                Time time = resultSet.getTime("time");
                Double price = resultSet.getDouble("price");
                Integer seats = resultSet.getInt("seats");
                Integer remainSeats = resultSet.getInt("remainSeats");
                tableData[i][0] = String.valueOf(routeId);
                tableData[i][1] = String.valueOf(origin);
                tableData[i][3] = String.valueOf(originCity);
                tableData[i][4] = String.valueOf(destination);
                tableData[i][5] = String.valueOf(destinationCity);
                tableData[i][6] = String.valueOf(departure);
                tableData[i][7] = String.valueOf(time);
                tableData[i][8] = String.valueOf(price);
                tableData[i][9] = String.valueOf(seats);
                tableData[i][10] = String.valueOf(remainSeats);
                i++;

            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }


    private void populateDataForSearch() {
        ResultSet resultSet = null;
        String tableData2[][] = new String[25][20];

        try {
            Connection conn = dbConnection.getInstance().getConnection();
            PreparedStatement preparedStatement = conn.prepareStatement("SELECT * from busbook.routes where origin = ? and destination = ? ; ");
            preparedStatement.setString(1, source.getSelectedItem().toString());
            preparedStatement.setString(2, destination.getSelectedItem().toString());

            resultSet = preparedStatement.executeQuery();

            int i = 0;
            while (resultSet.next()) {
                String routeId = resultSet.getString("routeId");
                String origin = resultSet.getString("origin");
                String originCity = resultSet.getString("originCity");
                String destination = resultSet.getString("destination");
                String destinationCity = resultSet.getString("destinationCity");
                Date departure = resultSet.getDate("departure");
                Time time = resultSet.getTime("time");
                Double price = resultSet.getDouble("price");
                Integer seats = resultSet.getInt("seats");
                Integer remainSeats = resultSet.getInt("remainSeats");
                tableData2[i][0] = String.valueOf(routeId);
                tableData2[i][1] = String.valueOf(origin);
                tableData2[i][3] = String.valueOf(originCity);
                tableData2[i][4] = String.valueOf(destination);
                tableData2[i][5] = String.valueOf(destinationCity);
                tableData2[i][6] = String.valueOf(departure);
                tableData2[i][7] = String.valueOf(time);
                tableData2[i][8] = String.valueOf(price);
                tableData2[i][9] = String.valueOf(seats);
                tableData2[i][10] = String.valueOf(remainSeats);
                i++;

            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        createTableforSearch(tableData2);
    }

    public void createTable() {
        Object[] columns = {"Route Id", "Origin", "originCity", "Destination", "destinationCity", "Departure", "time", "Price", "Seates", "RemainSeats"};
        final DefaultTableModel model = new DefaultTableModel(tableData, columns);
        table.setModel(model);
        table.setRowHeight(30);
    }

    public void createTableforSearch(String tableData2[][]) {
        Object[] columns = {"Route Id", "Origin", "originCity", "Destination", "destinationCity", "Departure", "time", "Price", "Seates", "RemainSeats"};
        final DefaultTableModel model = new DefaultTableModel(tableData2, columns);
        table.setModel(model);
        table.setRowHeight(30);
    }

    public void setLocationAndSize() {
        tableWithScrolBox.setBounds(20, 130, 690, 155);
        source.setBounds(20, 95, 145, 25);
        destination.setBounds(180, 95, 145, 25);
        searchBtn.setBounds(340, 95, 100, 25);
        bookRouteBtn.setBounds(540, 95, 170, 25);
    }

    public void addComponentsToFrame() {
        frame.add(tableWithScrolBox);
        frame.add(source);
        frame.add(destination);
        frame.add(searchBtn);
        frame.add(bookRouteBtn);
    }

    public void actionEvent() {
        searchBtn.addActionListener(this);
        bookRouteBtn.addActionListener(this);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == searchBtn) {
            populateDataForSearch();
        } else if (e.getSource() == bookRouteBtn) {
            BookRoute();
        }
    }

    public void BookRoute(){

        int column = 0;
        int row = table.getSelectedRow();
        String value = table.getModel().getValueAt(row, column).toString();

        try {
            Connection conn = dbConnection.getInstance().getConnection();

            String query = " insert into busbook.bookedroutes (`CustomerId`, `routeId`)" +
                    " values (?, ?)";

            // create the mysql insert preparedstatement
            PreparedStatement preparedStmt = conn.prepareStatement(query);
            preparedStmt.setString(1, customerID);
            preparedStmt.setString(2, value);

            // execute the preparedstatement
            preparedStmt.execute();
        } catch (SQLException | ClassNotFoundException ex) {
            ex.printStackTrace();
        }

    }

    public static void main(String[] args) {
        new bookRoutesCustomer("23");
    }
}
